releaseInfo.name=CodeCC Code Check
releaseInfo.summary=Support all CodeCC code inspection tools under Linux, MacOS, and Windows systems, including code defects (bkcheck, etc.), security vulnerabilities (sensitive information, high-risk components, etc.), code specifications (CppLint, CheckStyle, etc.), cyclomatic complexity, repetition rate, etc. .
input.languages.label=Programming Language
input.languages.desc=Tools will match different programming language
input.tools.label=Code Review Tool
input.asyncTask.label=Sync Method
input.asyncTask.list[0].label=Synchronize
input.asyncTask.list[1].label=Asynchronous
input.asyncTaskId.label=Task
input.asyncTaskId.desc=You can choose to create a task yourself in the CodeCC service, or you can directly enter the task ID. The task ID can be obtained from the CodeCC link (in /codecc/myproj/task/25324/, 25324 is the task ID). Support pipeline variables.
input.goPath.label=GOPATH
input.goPath.desc=Help find the code path of the dependent library to get a more useful result
input.goPath.placeholder=Relative paths under {WORKSPACE}, please use comma to separate multiple paths, support pipeline variables
input.pyVersion.label=Python Version
input.scriptType.label=Script Type
input.script.label=Script
input.script.default=#Coverity/Klocwork will compile your code by calling the compilation script to identify defects\n# Please use build tools such as maven/cmake to write a compilation script build.sh\n# Make sure build.sh can compile the code\n# cd path/to/build.sh\n# sh build.sh
input.script.desc=The corresponding tool will use this script to compile the code in order to track the compilation process and find code defects
input.multiPipelineMark.label=Label
input.multiPipelineMark.placeholder=Optional. Only numbers, letters, and underscores are supported.
input.multiPipelineMark.desc=If the pipeline has multiple code analysis plugins, a label can be used to distinguish them
input.toolScanType.label=Scan Method
input.toolScanType.list[0].label=Quick Full Scan
input.toolScanType.list[1].label=Full Scan
input.toolScanType.list[2].label=Differential Scan
input.toolScanType.list[3].label=MR/PR Scan
input.toolScanType.desc=Quick Full Scan: All files will be scanned for the first time. Subsequent scans of unchanged files will reuse previous scan results to increase scan speed.\nFull Scan: Scan all files every time. Klocwork, Pinpoint, Gometalinter, and repetition rate only support this scanning method.\nDifference scanning: Scan the difference files between the current workspace branch and the comparison branch.\nMR/PR scan: scan the difference between the source branch and the target branch of MR/PR, the default is the difference row, and the difference file can be selected. The source branch code needs to be pulled to the workspace. MR/PR scans do not support manual execution or pipelined retries.
input.mrCommentEnable.text=Sync the defect info to Tencent internal Git viewing page
input.newDefectJudgeFromDate.label=New Alerts Threshold
input.newDefectJudgeFromDate.desc=Alerts sent after the selected date are New Alerts
input.transferAuthorList.label=Change Owner
input.transferAuthorList.desc=Alerts will send to the new owner when the tool's ownership changed
input.openScanPrj.text=Use open sourced tool to scan project
input.openScanPrj.desc=Use open sourced scanning tool when selected
output.BK_CI_CODECC_TASK_ID.description=CodeCC task id
output.BK_CI_CODECC_TASK_STATUS.description=Whether the CodeCC task runs successfully

# output label name
asyncReport.label=CodeCC Code Check V3
asyncReport.title=Go to CodeCC to view the results
asyncReport.desc=Since it is executed asynchronously, you need to go to the CodeCC service to check the result of this task
asyncReport.hrefText=View code check results
report.title=CodeCC Report
report.overview=Overview
report.label=View Details
large.report.head.html.title=CodeCC Defect Convergence Details
large.report.head.html.h1=CodeCC Defect Convergence Details
